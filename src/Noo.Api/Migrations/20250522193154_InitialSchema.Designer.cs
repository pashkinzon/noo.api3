// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noo.Api.Core.DataAbstraction.Db;

#nullable disable

namespace Noo.Api.Migrations
{
    [DbContext(typeof(NooDbContext))]
    [Migration("20250522193154_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseModelUserModel", b =>
                {
                    b.Property<byte[]>("AuthorsId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("CoursesAsAuthorId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.HasKey("AuthorsId", "CoursesAsAuthorId");

                    b.HasIndex("CoursesAsAuthorId");

                    b.ToTable("course_mm_CoursesAsAuthor_user");
                });

            modelBuilder.Entity("CourseModelUserModel1", b =>
                {
                    b.Property<byte[]>("CoursesAsEditorId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<byte[]>("EditorsId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("CoursesAsEditorId", "EditorsId");

                    b.HasIndex("EditorsId");

                    b.ToTable("course_mm_CoursesAsEditor_user");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("color");

                    b.Property<byte[]>("CourseId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<byte[]>("ParentChapterId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("parent_chapter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentChapterId");

                    b.ToTable("course_chapter");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsWorkAvailable")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_work_available");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WorkCheckDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("work_check_deadline_at");

                    b.Property<byte[]>("WorkId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.Property<DateTime?>("WorkSolveDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("work_solve_deadline_at");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("course_material_content");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("ChapterId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("chapter_id");

                    b.Property<byte[]>("ContentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("publish_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("TitleColor")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("title_color");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.ToTable("course_material");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialReactionModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MaterialId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("material_id");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("ENUM('check', 'thinking')")
                        .HasColumnName("reaction");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("course_reaction");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMembershipModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("AssignerId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("assigner_id");

                    b.Property<byte[]>("CourseId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_archived");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("course_membership");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("ThumbnailId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("thumbnail_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Noo.Api.Media.Models.MediaModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("ActualName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("actual_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("VARCHAR(127)")
                        .HasColumnName("extension");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("path");

                    b.Property<int>("Size")
                        .HasColumnType("INT(11)")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("media");
                });

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MentorId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("mentor_id");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentId", "MentorId", "SubjectId")
                        .IsUnique();

                    b.ToTable("mentor_assignment");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_blocked");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("ENUM('student', 'mentor', 'assistant', 'teacher', 'admin')")
                        .HasColumnName("role");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("telegram_id");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("telegram_username");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("TelegramUsername");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Test','MiniTest','Phrase','TrialWork','SecondPart')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("Title");

                    b.HasIndex("Type");

                    b.ToTable("work");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<bool>("CheckOneByOne")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("check_one_by_one");

                    b.Property<string>("CheckStrategy")
                        .IsRequired()
                        .HasColumnType("ENUM('Manual','Auto')")
                        .HasColumnName("check_strategy");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Explanation")
                        .HasColumnType("JSON")
                        .HasColumnName("explanation")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Explanation"), "utf8mb4");

                    b.Property<byte>("MaxScore")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("max_score");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.PrimitiveCollection<string>("RightAnswers")
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("right_answers");

                    b.Property<bool>("ShowAnswerBeforeCheck")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("show_answer_before_check");

                    b.Property<string>("SolveHint")
                        .HasColumnType("JSON")
                        .HasColumnName("solve_hint")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SolveHint"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Word','Text','Essay','FinalEssay')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("WorkId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("work_task");
                });

            modelBuilder.Entity("CourseModelUserModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseModelUserModel1", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseModel", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseChapterModel", "ParentChapter")
                        .WithMany("SubChapters")
                        .HasForeignKey("ParentChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ParentChapter");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("CourseMaterialContents")
                        .HasForeignKey("WorkId");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseChapterModel", "Chapter")
                        .WithMany("Materials")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseMaterialContentModel", "Content")
                        .WithOne("Material")
                        .HasForeignKey("Noo.Api.Courses.Models.CourseMaterialModel", "ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialReactionModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseMaterialModel", "Material")
                        .WithMany("Reactions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("CourseMaterialReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMembershipModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "Assigner")
                        .WithMany("CoursesAsAssigner")
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Courses.Models.CourseModel", "Course")
                        .WithMany("Memberships")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany("CoursesAsMember")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.HasOne("Noo.Api.Media.Models.MediaModel", "Thumbnail")
                        .WithMany("Courses")
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", "Subject")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mentor");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", "Subject")
                        .WithMany("Works")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("SubChapters");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.Navigation("Material")
                        .IsRequired();
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Noo.Api.Media.Models.MediaModel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Navigation("MentorAssignments");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserModel", b =>
                {
                    b.Navigation("CourseMaterialReactions");

                    b.Navigation("CoursesAsAssigner");

                    b.Navigation("CoursesAsMember");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Navigation("CourseMaterialContents");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
