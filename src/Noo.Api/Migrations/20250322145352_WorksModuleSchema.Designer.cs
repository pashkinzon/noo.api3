// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noo.Api.Core.DataAbstraction.Db;

#nullable disable

namespace Noo.Api.Migrations
{
    [DbContext(typeof(NooDbContext))]
    [Migration("20250322145352_WorksModuleSchema")]
    partial class WorksModuleSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("work");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<bool>("CheckOneByOne")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("check_one_by_one");

                    b.Property<string>("CheckStrategy")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("check_strategy");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Explanation")
                        .HasColumnType("JSON")
                        .HasColumnName("explanation")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Explanation"), "utf8mb4");

                    b.Property<int>("MaxScore")
                        .HasColumnType("INT")
                        .HasColumnName("max_score");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("right_answer");

                    b.Property<bool>("ShowAnswerBeforeCheck")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("show_answer_before_check");

                    b.Property<string>("SolveHint")
                        .HasColumnType("JSON")
                        .HasColumnName("solve_hint")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SolveHint"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("WorkId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("work_task");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
