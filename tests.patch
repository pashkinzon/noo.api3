 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/Noo.Api.UnitTests/Auth/AuthEmailServiceTests.cs b/tests/Noo.Api.UnitTests/Auth/AuthEmailServiceTests.cs
new file mode 100644
index 0000000000000000000000000000000000000000..2b9af9abc1999cbb2ab1a4449a735b88b3b3e248
--- /dev/null
+++ b/tests/Noo.Api.UnitTests/Auth/AuthEmailServiceTests.cs
@@ -0,0 +1,73 @@
+using Moq;
+using Noo.Api.Auth.EmailTemplates;
+using Noo.Api.Auth.Services;
+using Noo.Api.Core.System.Email;
+using Xunit;
+
+namespace Noo.Api.UnitTests.Auth;
+
+public class AuthEmailServiceTests
+{
+    private readonly Mock<IEmailService> _emailServiceMock;
+    private readonly AuthEmailService _service;
+
+    public AuthEmailServiceTests()
+    {
+        _emailServiceMock = new Mock<IEmailService>();
+        _service = new AuthEmailService(_emailServiceMock.Object);
+    }
+
+    [Fact]
+    public async Task SendEmailVerificationEmailAsync_SendsCorrectEmail()
+    {
+        const string email = "user@example.com";
+        const string name = "User";
+        const string link = "link";
+
+        await _service.SendEmailVerificationEmailAsync(email, name, link);
+
+        _emailServiceMock.Verify(x => x.SendEmailAsync(It.Is<Email<EmailVerificationData, EmailVerificationTemplate>>(e =>
+            e.ToEmail == email &&
+            e.ToName == name &&
+            e.Subject == "Подтверждение электронной почты" &&
+            e.Body.Name == name &&
+            e.Body.VerificationLink == link
+        )), Times.Once);
+    }
+
+    [Fact]
+    public async Task SendForgotPasswordEmailAsync_SendsCorrectEmail()
+    {
+        const string email = "user@example.com";
+        const string name = "User";
+        const string link = "link";
+
+        await _service.SendForgotPasswordEmailAsync(email, name, link);
+
+        _emailServiceMock.Verify(x => x.SendEmailAsync(It.Is<Email<RequestPasswordChangeData, RequestPasswordChangeTemplate>>(e =>
+            e.ToEmail == email &&
+            e.ToName == name &&
+            e.Subject == "Сброс пароля" &&
+            e.Body.Name == name &&
+            e.Body.ResetPasswordLink == link
+        )), Times.Once);
+    }
+
+    [Fact]
+    public async Task SendEmailChangeEmailAsync_SendsCorrectEmail()
+    {
+        const string email = "user@example.com";
+        const string name = "User";
+        const string link = "link";
+
+        await _service.SendEmailChangeEmailAsync(email, name, link);
+
+        _emailServiceMock.Verify(x => x.SendEmailAsync(It.Is<Email<ChangeEmailData, ChangeEmailTemplate>>(e =>
+            e.ToEmail == email &&
+            e.ToName == name &&
+            e.Subject == "Изменение электронной почты" &&
+            e.Body.Name == name &&
+            e.Body.ChangeEmailLink == link
+        )), Times.Once);
+    }
+}
diff --git a/tests/Noo.Api.UnitTests/Auth/AuthServiceTests.cs b/tests/Noo.Api.UnitTests/Auth/AuthServiceTests.cs
new file mode 100644
index 0000000000000000000000000000000000000000..14b58c5db362cfc9a688def097bf2f5f6323e136
--- /dev/null
+++ b/tests/Noo.Api.UnitTests/Auth/AuthServiceTests.cs
@@ -0,0 +1,121 @@
+using Microsoft.AspNetCore.Http;
+using Microsoft.Extensions.Options;
+using Moq;
+using Noo.Api.Auth.DTO;
+using Noo.Api.Auth.Services;
+using Noo.Api.Core.Config.Env;
+using Noo.Api.Core.Exceptions.Http;
+using Noo.Api.Core.Security;
+using Noo.Api.Core.Security.Authorization;
+using Noo.Api.Sessions.Services;
+using Noo.Api.Users.Models;
+using Noo.Api.Users.Services;
+using Xunit;
+
+namespace Noo.Api.UnitTests.Auth;
+
+public class AuthServiceTests
+{
+    private AuthService CreateService(Mock<IUserService> userServiceMock)
+    {
+        var tokenService = new Mock<IAuthTokenService>();
+        var emailService = new Mock<IAuthEmailService>();
+        var urlGenerator = new Mock<IAuthUrlGenerator>();
+        var hashService = new Mock<IHashService>();
+        var sessionService = new Mock<ISessionService>();
+        var httpContextAccessor = new Mock<IHttpContextAccessor>();
+        httpContextAccessor.SetupGet(x => x.HttpContext).Returns(new DefaultHttpContext());
+
+        var config = new JwtConfig
+        {
+            Secret = "supersecretsecret1234567890",
+            Issuer = "issuer",
+            Audience = "audience",
+            ExpireDays = 1
+        };
+
+        return new AuthService(
+            tokenService.Object,
+            emailService.Object,
+            urlGenerator.Object,
+            userServiceMock.Object,
+            hashService.Object,
+            Options.Create(config),
+            sessionService.Object,
+            httpContextAccessor.Object
+        );
+    }
+
+    [Fact]
+    public async Task CheckUsernameAsync_ReturnsExpectedValue()
+    {
+        var userService = new Mock<IUserService>();
+        userService.Setup(x => x.UserExistsAsync("taken", null)).ReturnsAsync(true);
+        userService.Setup(x => x.UserExistsAsync("free", null)).ReturnsAsync(false);
+        var service = CreateService(userService);
+
+        var taken = await service.CheckUsernameAsync("taken");
+        var free = await service.CheckUsernameAsync("free");
+
+        Assert.False(taken);
+        Assert.True(free);
+    }
+
+    [Fact]
+    public async Task RegisterAsync_WhenUserExists_ThrowsAlreadyExistsException()
+    {
+        var userService = new Mock<IUserService>();
+        userService.Setup(x => x.UserExistsAsync(It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(true);
+        var service = CreateService(userService);
+
+        var dto = new RegisterDTO { Username = "user", Email = "e@e", Name = "n", Password = "p" };
+        await Assert.ThrowsAsync<AlreadyExistsException>(() => service.RegisterAsync(dto));
+    }
+
+    [Fact]
+    public async Task RequestPasswordResetAsync_UserNotFound_ThrowsNotFoundException()
+    {
+        var userService = new Mock<IUserService>();
+        userService.Setup(x => x.GetUserByUsernameOrEmailAsync("email")).ReturnsAsync((UserModel?)null);
+        var service = CreateService(userService);
+
+        await Assert.ThrowsAsync<NotFoundException>(() => service.RequestPasswordResetAsync("email"));
+    }
+
+    [Fact]
+    public async Task ConfirmEmailChangeAsync_InvalidToken_ThrowsUnauthorizedException()
+    {
+        var user = new UserModel { Id = Ulid.NewUlid() };
+        var userService = new Mock<IUserService>();
+        userService.Setup(x => x.GetUserByIdAsync(user.Id)).ReturnsAsync(user);
+        var tokenService = new Mock<IAuthTokenService>();
+        tokenService.Setup(x => x.ValidateEmailChangeToken("bad")).Returns((string?)null);
+
+        var emailService = new Mock<IAuthEmailService>();
+        var urlGenerator = new Mock<IAuthUrlGenerator>();
+        var hashService = new Mock<IHashService>();
+        var sessionService = new Mock<ISessionService>();
+        var httpContextAccessor = new Mock<IHttpContextAccessor>();
+        httpContextAccessor.SetupGet(x => x.HttpContext).Returns(new DefaultHttpContext());
+        var config = new JwtConfig
+        {
+            Secret = "supersecretsecret1234567890",
+            Issuer = "issuer",
+            Audience = "audience",
+            ExpireDays = 1
+        };
+
+        var service = new AuthService(
+            tokenService.Object,
+            emailService.Object,
+            urlGenerator.Object,
+            userService.Object,
+            hashService.Object,
+            Options.Create(config),
+            sessionService.Object,
+            httpContextAccessor.Object
+        );
+
+        await Assert.ThrowsAsync<UnauthorizedException>(() => service.ConfirmEmailChangeAsync(user.Id, "bad"));
+    }
+}
diff --git a/tests/Noo.Api.UnitTests/Auth/AuthTokenServiceTests.cs b/tests/Noo.Api.UnitTests/Auth/AuthTokenServiceTests.cs
new file mode 100644
index 0000000000000000000000000000000000000000..27e5460a31eed16fbccc2c7cf230fe6e41205b8d
--- /dev/null
+++ b/tests/Noo.Api.UnitTests/Auth/AuthTokenServiceTests.cs
@@ -0,0 +1,75 @@
+using System.IdentityModel.Tokens.Jwt;
+using System.Security.Claims;
+using Microsoft.Extensions.Options;
+using Noo.Api.Auth;
+using Noo.Api.Auth.Services;
+using Noo.Api.Core.Config.Env;
+using Noo.Api.Core.Security.Authorization;
+using Xunit;
+
+namespace Noo.Api.UnitTests.Auth;
+
+public class AuthTokenServiceTests
+{
+    private readonly AuthTokenService _service;
+
+    public AuthTokenServiceTests()
+    {
+        var config = new JwtConfig
+        {
+            Secret = "supersecretsecret1234567890",
+            Issuer = "issuer",
+            Audience = "audience",
+            ExpireDays = 1
+        };
+        _service = new AuthTokenService(Options.Create(config));
+    }
+
+    [Fact]
+    public void GenerateAccessToken_ShouldContainClaims()
+    {
+        var payload = new AccessTokenPayload
+        {
+            UserId = Ulid.NewUlid(),
+            SessionId = Ulid.NewUlid(),
+            UserRole = UserRoles.Teacher,
+            ExpiresAt = DateTime.UtcNow.AddDays(1)
+        };
+
+        var token = _service.GenerateAccessToken(payload);
+        var handler = new JwtSecurityTokenHandler();
+        var jwt = handler.ReadJwtToken(token);
+
+        Assert.Contains(jwt.Claims, c => c.Type == ClaimTypes.Name && c.Value == nameof(AuthTokenType.Access));
+        Assert.Contains(jwt.Claims, c => c.Type == ClaimTypes.NameIdentifier && c.Value == payload.UserId.ToString());
+        Assert.Contains(jwt.Claims, c => c.Type == ClaimTypes.Sid && c.Value == payload.SessionId.ToString());
+        Assert.Contains(jwt.Claims, c => c.Type == ClaimTypes.Role && c.Value == payload.UserRole.ToString());
+    }
+
+    [Fact]
+    public void EmailVerificationToken_ShouldValidate()
+    {
+        var userId = Ulid.NewUlid();
+        var token = _service.GenerateEmailVerificationToken(userId);
+        Assert.True(_service.ValidateEmailVerificationToken(token));
+    }
+
+    [Fact]
+    public void PasswordResetToken_ShouldValidate()
+    {
+        var userId = Ulid.NewUlid();
+        var token = _service.GeneratePasswordResetToken(userId);
+        var result = _service.ValidatePasswordResetToken(token);
+        Assert.Equal(userId, result);
+    }
+
+    [Fact]
+    public void EmailChangeToken_ShouldValidate()
+    {
+        var userId = Ulid.NewUlid();
+        const string newEmail = "new@example.com";
+        var token = _service.GenerateEmailChangeToken(userId, newEmail);
+        var result = _service.ValidateEmailChangeToken(token);
+        Assert.Equal(newEmail, result);
+    }
+}
diff --git a/tests/Noo.Api.UnitTests/Auth/AuthUrlGeneratorTests.cs b/tests/Noo.Api.UnitTests/Auth/AuthUrlGeneratorTests.cs
new file mode 100644
index 0000000000000000000000000000000000000000..dcb6ebf48902ff2db1279f6e445d0bc6f19fcbd1
--- /dev/null
+++ b/tests/Noo.Api.UnitTests/Auth/AuthUrlGeneratorTests.cs
@@ -0,0 +1,48 @@
+using Microsoft.Extensions.Options;
+using Noo.Api.Auth.Services;
+using Noo.Api.Core.Config.Env;
+using Xunit;
+
+namespace Noo.Api.UnitTests.Auth;
+
+public class AuthUrlGeneratorTests
+{
+    private readonly AuthUrlGenerator _generator;
+
+    public AuthUrlGeneratorTests()
+    {
+        var config = new AppConfig
+        {
+            Location = "https://example.com",
+            BaseUrl = "https://example.com",
+            UserOnlineThresholdMinutes = 15,
+            UserActiveThresholdDays = 7,
+            AllowedOrigins = []
+        };
+        _generator = new AuthUrlGenerator(Options.Create(config));
+    }
+
+    [Fact]
+    public void GenerateEmailVerificationUrl_ReturnsCorrectUrl()
+    {
+        const string token = "token";
+        var url = _generator.GenerateEmailVerificationUrl(token);
+        Assert.Equal("https://example.com/auth/verify-email?token=token", url);
+    }
+
+    [Fact]
+    public void GeneratePasswordResetUrl_ReturnsCorrectUrl()
+    {
+        const string token = "token";
+        var url = _generator.GeneratePasswordResetUrl(token);
+        Assert.Equal("https://example.com/auth/reset-password?token=token", url);
+    }
+
+    [Fact]
+    public void GenerateEmailChangeUrl_ReturnsCorrectUrl()
+    {
+        const string token = "token";
+        var url = _generator.GenerateEmailChangeUrl(token);
+        Assert.Equal("https://example.com/auth/verify-email-change?token=token", url);
+    }
+}
 
EOF
)