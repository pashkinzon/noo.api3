// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noo.Api.Core.DataAbstraction.Db;

#nullable disable

namespace Noo.Api.Migrations
{
    [DbContext(typeof(NooDbContext))]
    [Migration("20250606210734_Schema")]
    partial class Schema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseModelUserModel", b =>
                {
                    b.Property<byte[]>("AuthorsId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("CoursesAsAuthorId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.HasKey("AuthorsId", "CoursesAsAuthorId");

                    b.HasIndex("CoursesAsAuthorId");

                    b.ToTable("course_mm_CoursesAsAuthor_user");
                });

            modelBuilder.Entity("CourseModelUserModel1", b =>
                {
                    b.Property<byte[]>("CoursesAsEditorId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<byte[]>("EditorsId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("CoursesAsEditorId", "EditorsId");

                    b.HasIndex("EditorsId");

                    b.ToTable("course_mm_CoursesAsEditor_user");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkAnswerModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("AssignedWorkModelId")
                        .HasColumnType("BINARY(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("DetailedScore")
                        .HasColumnType("json")
                        .HasColumnName("detailed_score");

                    b.Property<ushort>("MaxScore")
                        .HasColumnType("SMALLINT UNSIGNED")
                        .HasColumnName("max_score");

                    b.Property<string>("MentorComment")
                        .HasColumnType("JSON")
                        .HasColumnName("mentor_comment")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MentorComment"), "utf8mb4");

                    b.Property<string>("RichTextContent")
                        .HasColumnType("JSON")
                        .HasColumnName("rich_text_content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RichTextContent"), "utf8mb4");

                    b.Property<ushort?>("Score")
                        .HasColumnType("SMALLINT UNSIGNED")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("ENUM('NotSubmitted', 'Submitted')")
                        .HasColumnName("status");

                    b.Property<byte[]>("TaskId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("WordContent")
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("word_content");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWorkModelId");

                    b.HasIndex("TaskId");

                    b.ToTable("assigned_work_answer");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkCommentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("assigned_work_comment");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte>("Attempt")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("attempt");

                    b.Property<DateTime?>("CheckDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("check_deadline_at");

                    b.Property<string>("CheckStatus")
                        .IsRequired()
                        .HasColumnType("ENUM('NotChecked', 'InProgress', 'Checked')")
                        .HasColumnName("check_status");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("checked_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.PrimitiveCollection<string>("ExcludedTaskIds")
                        .HasColumnType("VARCHAR(2048)")
                        .HasColumnName("excluded_task_ids");

                    b.Property<byte[]>("HelperMentorCommentId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("helper_mentor_comment_id");

                    b.Property<byte[]>("HelperMentorId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("helper_mentor_id");

                    b.Property<bool>("IsArchivedByAssistants")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_archived_by_assistants");

                    b.Property<bool>("IsArchivedByMentors")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_archived_by_mentors");

                    b.Property<bool>("IsArchivedByStudent")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_archived_by_student");

                    b.Property<byte[]>("MainMentorCommentId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("main_mentor_comment_id");

                    b.Property<byte[]>("MainMentorId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("main_mentor_id");

                    b.Property<ushort>("MaxScore")
                        .HasColumnType("SMALLINT UNSIGNED")
                        .HasColumnName("max_score");

                    b.Property<ushort?>("Score")
                        .HasColumnType("SMALLINT UNSIGNED")
                        .HasColumnName("score");

                    b.Property<DateTime?>("SolveDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("solve_deadline_at");

                    b.Property<string>("SolveStatus")
                        .IsRequired()
                        .HasColumnType("ENUM('NotSolved', 'InProgress', 'Solved')")
                        .HasColumnName("solve_status");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("solved_at");

                    b.Property<byte[]>("StudentCommentId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_comment_id");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Test','MiniTest','Phrase','TrialWork','SecondPart')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("WorkId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("CheckStatus");

                    b.HasIndex("HelperMentorCommentId")
                        .IsUnique();

                    b.HasIndex("HelperMentorId");

                    b.HasIndex("MainMentorCommentId")
                        .IsUnique();

                    b.HasIndex("MainMentorId");

                    b.HasIndex("SolveStatus");

                    b.HasIndex("StudentCommentId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex("Title");

                    b.HasIndex("WorkId");

                    b.ToTable("assigned_work");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkStatusHistoryModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("AssignedWorkId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("assigned_work_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("changed_at");

                    b.Property<byte[]>("ChangedById")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("changed_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("ENUM('StartedSolving', 'SolveDeadlineShifted', 'Solved', 'StartedChecking', 'CheckDeadlineShifted', 'Checked', 'SentOnRecheck', 'SentOnResolve')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("json")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWorkId");

                    b.HasIndex("ChangedById");

                    b.ToTable("assigned_work_status_history");
                });

            modelBuilder.Entity("Noo.Api.Calendar.Models.CalendarEventModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("AssignedWorkId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("assigned_work_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("Enum('Custom', 'AssignedWorkCheckDeadline', 'AssignedWorkSolveDeadline', 'AssignedWorkCheked', 'AssignedWorkSolved')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWorkId");

                    b.HasIndex("DateTime");

                    b.HasIndex("UserId");

                    b.ToTable("calendar_event");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("color");

                    b.Property<byte[]>("CourseId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<byte[]>("ParentChapterId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("parent_chapter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentChapterId");

                    b.ToTable("course_chapter");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsWorkAvailable")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_work_available");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WorkCheckDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("work_check_deadline_at");

                    b.Property<byte[]>("WorkId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.Property<DateTime?>("WorkSolveDeadlineAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("work_solve_deadline_at");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("course_material_content");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("ChapterId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("chapter_id");

                    b.Property<byte[]>("ContentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("publish_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("TitleColor")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("title_color");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.ToTable("course_material");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialReactionModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MaterialId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("material_id");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("ENUM('check', 'thinking')")
                        .HasColumnName("reaction");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("course_reaction");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMembershipModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("AssignerId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("assigner_id");

                    b.Property<byte[]>("CourseId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_archived");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("course_membership");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("ThumbnailId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("thumbnail_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Noo.Api.GoogleSheetsIntegrations.Models.GoogleSheetsInegrationModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("CronPattern")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("cron_pattern");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("entity");

                    b.Property<string>("GoogleAuthData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("google_auth_data");

                    b.Property<string>("LastErrorText")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_error_text");

                    b.Property<DateTime?>("LastRunAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("last_run_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("ENUM('Active', 'Inactive', 'Error')")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("google_sheets_integration");
                });

            modelBuilder.Entity("Noo.Api.Media.Models.MediaModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("ActualName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("actual_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("extension");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("path");

                    b.Property<int>("Size")
                        .HasColumnType("INT(11)")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Hash");

                    b.ToTable("media");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoCommentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("VideoId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("video_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("nootube_video_comment");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("description");

                    b.Property<uint?>("Duration")
                        .HasColumnType("MEDIUMINT UNSIGNED")
                        .HasColumnName("duration");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("external_identifier");

                    b.Property<string>("ExternalThumbnailUrl")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("external_thumbnail_url");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("external_url");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("DATETIME(0)")
                        .HasColumnName("published_at");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("ENUM('NooTubeServiceType', 'NooTube, YouTube, VkVideo, Rutube')")
                        .HasColumnName("service_type");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("ENUM('VideoState', 'NotUploaded, Uploading, Uploaded, Published')")
                        .HasColumnName("state");

                    b.Property<byte[]>("ThumbnailId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("thumbnail_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UploadedById")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("uploaded_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailId")
                        .IsUnique();

                    b.HasIndex("UploadedById");

                    b.ToTable("nootube_video");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoReactionModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("ENUM('VideoReaction', 'Like', 'Dislike', 'Heart', 'Laugh', 'Sad', 'Mindblowing')")
                        .HasColumnName("reaction");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("VideoId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("video_id");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.HasIndex("UserId", "VideoId")
                        .IsUnique();

                    b.ToTable("nootube_video_reaction");
                });

            modelBuilder.Entity("Noo.Api.Notifications.Models.NotificationModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsBanner")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_banner");

                    b.Property<bool>("IsRead")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_read");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("link");

                    b.Property<string>("LinkText")
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("link_text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("VARCHAR(127)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollAnswerModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("PollParticipationModelId")
                        .HasColumnType("BINARY(16)");

                    b.Property<byte[]>("PollQuestionId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("poll_question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PollParticipationModelId");

                    b.HasIndex("PollQuestionId");

                    b.ToTable("poll_answer");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("poll");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollParticipationModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("PollId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("poll_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserExternalData")
                        .HasColumnType("json")
                        .HasColumnName("user_external_data");

                    b.Property<string>("UserExternalIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("user_external_identifier");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("ENUM('AuthenticatedUser', 'TelegramUser')")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("poll_participation");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollQuestionModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Config")
                        .HasColumnType("json")
                        .HasColumnName("config");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("description");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_required");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<byte[]>("PollId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("poll_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Checkbox', 'SingleChoice', 'MultipleChoice', 'Text', 'Number', 'Date', 'DateTime', 'Rating', 'Files')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("poll_question");
                });

            modelBuilder.Entity("Noo.Api.Sessions.Models.SessionModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Browser")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("browser");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Device")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("device");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("ENUM('desktop', 'mobile', 'tablet', 'unknown')")
                        .HasColumnName("device_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Os")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("os");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("user_agent");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("session");
                });

            modelBuilder.Entity("Noo.Api.Snippets.Models.SnippetModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("snippet");
                });

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("Noo.Api.Support.Models.SupportArticleModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<byte[]>("CategoryId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("support_article");
                });

            modelBuilder.Entity("Noo.Api.Support.Models.SupportCategoryModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_pinned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<byte[]>("ParentId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("parent_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("support_category");
                });

            modelBuilder.Entity("Noo.Api.UserSettings.Models.UserSettingsModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("FontSize")
                        .HasColumnType("longtext")
                        .HasColumnName("font_size");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext")
                        .HasColumnName("theme");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_settings");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MentorId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("mentor_id");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentId", "MentorId", "SubjectId")
                        .IsUnique();

                    b.ToTable("mentor_assignment");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserAvatarModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("AvatarType")
                        .IsRequired()
                        .HasColumnType("ENUM('None', 'Custom', 'Telegram')")
                        .HasColumnName("avatar_type");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MediaId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("media_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_avatar");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_blocked");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("ENUM('student', 'mentor', 'assistant', 'teacher', 'admin')")
                        .HasColumnName("role");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("telegram_id");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("telegram_username");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("VARCHAR(63)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("TelegramUsername");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Test','MiniTest','Phrase','TrialWork','SecondPart')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("Title");

                    b.HasIndex("Type");

                    b.ToTable("work");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<bool>("CheckOneByOne")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("check_one_by_one");

                    b.Property<string>("CheckStrategy")
                        .IsRequired()
                        .HasColumnType("ENUM('Manual', 'ExactMatchOrZero', 'ExactMatchWithWrongCharacter', 'MultipleChoice', 'Sequence')")
                        .HasColumnName("check_strategy");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Explanation")
                        .HasColumnType("JSON")
                        .HasColumnName("explanation")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Explanation"), "utf8mb4");

                    b.Property<byte>("MaxScore")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("max_score");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.PrimitiveCollection<string>("RightAnswers")
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(512)")
                        .HasColumnName("right_answers");

                    b.Property<bool>("ShowAnswerBeforeCheck")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("show_answer_before_check");

                    b.Property<string>("SolveHint")
                        .HasColumnType("JSON")
                        .HasColumnName("solve_hint")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SolveHint"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("ENUM('Word','Text','Essay','FinalEssay')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("WorkId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("work_task");
                });

            modelBuilder.Entity("CourseModelUserModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseModelUserModel1", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseModel", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkAnswerModel", b =>
                {
                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkModel", null)
                        .WithMany("Answers")
                        .HasForeignKey("AssignedWorkModelId");

                    b.HasOne("Noo.Api.Works.Models.WorkTaskModel", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkModel", b =>
                {
                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkCommentModel", "HelperMentorComment")
                        .WithOne("AssignedWorkAsHelperMentor")
                        .HasForeignKey("Noo.Api.AssignedWorks.Models.AssignedWorkModel", "HelperMentorCommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "HelperMentor")
                        .WithMany()
                        .HasForeignKey("HelperMentorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkCommentModel", "MainMentorComment")
                        .WithOne("AssignedWorkAsMainMentor")
                        .HasForeignKey("Noo.Api.AssignedWorks.Models.AssignedWorkModel", "MainMentorCommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "MainMentor")
                        .WithMany()
                        .HasForeignKey("MainMentorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkCommentModel", "StudentComment")
                        .WithOne("AssignedWorkAsStudent")
                        .HasForeignKey("Noo.Api.AssignedWorks.Models.AssignedWorkModel", "StudentCommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HelperMentor");

                    b.Navigation("HelperMentorComment");

                    b.Navigation("MainMentor");

                    b.Navigation("MainMentorComment");

                    b.Navigation("Student");

                    b.Navigation("StudentComment");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkStatusHistoryModel", b =>
                {
                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkModel", "AssignedWork")
                        .WithMany("StatusHistory")
                        .HasForeignKey("AssignedWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "ChangedBy")
                        .WithMany("AssignedWorkHistoryChanges")
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedWork");

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("Noo.Api.Calendar.Models.CalendarEventModel", b =>
                {
                    b.HasOne("Noo.Api.AssignedWorks.Models.AssignedWorkModel", "AssignedWork")
                        .WithMany("Events")
                        .HasForeignKey("AssignedWorkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseModel", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseChapterModel", "ParentChapter")
                        .WithMany("SubChapters")
                        .HasForeignKey("ParentChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");

                    b.Navigation("ParentChapter");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("CourseMaterialContents")
                        .HasForeignKey("WorkId");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseChapterModel", "Chapter")
                        .WithMany("Materials")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Courses.Models.CourseMaterialContentModel", "Content")
                        .WithOne("Material")
                        .HasForeignKey("Noo.Api.Courses.Models.CourseMaterialModel", "ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialReactionModel", b =>
                {
                    b.HasOne("Noo.Api.Courses.Models.CourseMaterialModel", "Material")
                        .WithMany("Reactions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("CourseMaterialReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMembershipModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "Assigner")
                        .WithMany("CoursesAsAssigner")
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Courses.Models.CourseModel", "Course")
                        .WithMany("Memberships")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany("CoursesAsMember")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.HasOne("Noo.Api.Media.Models.MediaModel", "Thumbnail")
                        .WithMany("Courses")
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoCommentModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("NooTubeVideoComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.NooTube.Models.NooTubeVideoModel", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoModel", b =>
                {
                    b.HasOne("Noo.Api.Media.Models.MediaModel", "Thumbnail")
                        .WithOne("NooTubeVideoThumbnail")
                        .HasForeignKey("Noo.Api.NooTube.Models.NooTubeVideoModel", "ThumbnailId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "UploadedByUser")
                        .WithMany("UploadedVideos")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Thumbnail");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoReactionModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("NooTubeVideoReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.NooTube.Models.NooTubeVideoModel", "Video")
                        .WithMany("Reactions")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Noo.Api.Notifications.Models.NotificationModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollAnswerModel", b =>
                {
                    b.HasOne("Noo.Api.Polls.Models.PollParticipationModel", null)
                        .WithMany("Answers")
                        .HasForeignKey("PollParticipationModelId");

                    b.HasOne("Noo.Api.Polls.Models.PollQuestionModel", "PollQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("PollQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollQuestion");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollParticipationModel", b =>
                {
                    b.HasOne("Noo.Api.Polls.Models.PollModel", "Poll")
                        .WithMany("Participations")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("PollParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Poll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Noo.Api.Polls.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Noo.Api.Sessions.Models.SessionModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Snippets.Models.SnippetModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithMany("Snippets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Support.Models.SupportArticleModel", b =>
                {
                    b.HasOne("Noo.Api.Support.Models.SupportCategoryModel", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Noo.Api.Support.Models.SupportCategoryModel", b =>
                {
                    b.HasOne("Noo.Api.Support.Models.SupportCategoryModel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Noo.Api.UserSettings.Models.UserSettingsModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithOne("Settings")
                        .HasForeignKey("Noo.Api.UserSettings.Models.UserSettingsModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", "Subject")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mentor");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserAvatarModel", b =>
                {
                    b.HasOne("Noo.Api.Media.Models.MediaModel", "Media")
                        .WithOne("UserAvatar")
                        .HasForeignKey("Noo.Api.Users.Models.UserAvatarModel", "MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Noo.Api.Users.Models.UserModel", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("Noo.Api.Users.Models.UserAvatarModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", "Subject")
                        .WithMany("Works")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkCommentModel", b =>
                {
                    b.Navigation("AssignedWorkAsHelperMentor");

                    b.Navigation("AssignedWorkAsMainMentor");

                    b.Navigation("AssignedWorkAsStudent");
                });

            modelBuilder.Entity("Noo.Api.AssignedWorks.Models.AssignedWorkModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Events");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseChapterModel", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("SubChapters");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialContentModel", b =>
                {
                    b.Navigation("Material")
                        .IsRequired();
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseMaterialModel", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Noo.Api.Courses.Models.CourseModel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Noo.Api.Media.Models.MediaModel", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("NooTubeVideoThumbnail");

                    b.Navigation("UserAvatar");
                });

            modelBuilder.Entity("Noo.Api.NooTube.Models.NooTubeVideoModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollModel", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollParticipationModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Noo.Api.Polls.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Navigation("MentorAssignments");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Noo.Api.Support.Models.SupportCategoryModel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserModel", b =>
                {
                    b.Navigation("AssignedWorkHistoryChanges");

                    b.Navigation("Avatar");

                    b.Navigation("CalendarEvents");

                    b.Navigation("CourseMaterialReactions");

                    b.Navigation("CoursesAsAssigner");

                    b.Navigation("CoursesAsMember");

                    b.Navigation("NooTubeVideoComments");

                    b.Navigation("NooTubeVideoReactions");

                    b.Navigation("Notifications");

                    b.Navigation("PollParticipations");

                    b.Navigation("Sessions");

                    b.Navigation("Settings");

                    b.Navigation("Snippets");

                    b.Navigation("UploadedVideos");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Navigation("CourseMaterialContents");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
