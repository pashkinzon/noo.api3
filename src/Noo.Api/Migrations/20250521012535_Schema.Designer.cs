// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noo.Api.Core.DataAbstraction.Db;

#nullable disable

namespace Noo.Api.Migrations
{
    [DbContext(typeof(NooDbContext))]
    [Migration("20250521012535_Schema")]
    partial class Schema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<byte[]>("MentorId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("mentor_id");

                    b.Property<byte[]>("StudentId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("student_id");

                    b.Property<byte[]>("SubjectId")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("subject_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentId", "MentorId", "SubjectId")
                        .IsUnique();

                    b.ToTable("mentor_assignment");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.UserModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("email");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_blocked");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("ENUM('student', 'mentor', 'assistant', 'teacher', 'admin')")
                        .HasColumnName("role");

                    b.Property<string>("TelegramId")
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("telegram_id");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("telegram_username");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<byte[]>("SubjectModelId")
                        .HasColumnType("BINARY(16)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SubjectModelId");

                    b.ToTable("work");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("id");

                    b.Property<bool>("CheckOneByOne")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("check_one_by_one");

                    b.Property<string>("CheckStrategy")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("check_strategy");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("content")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("created_at");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<DateTime>("CreatedAt"));

                    b.Property<string>("Explanation")
                        .HasColumnType("JSON")
                        .HasColumnName("explanation")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Explanation"), "utf8mb4");

                    b.Property<int>("MaxScore")
                        .HasColumnType("INT")
                        .HasColumnName("max_score");

                    b.Property<int>("Order")
                        .HasColumnType("INT")
                        .HasColumnName("order");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("right_answer");

                    b.Property<bool>("ShowAnswerBeforeCheck")
                        .HasColumnType("TINYINT(1)")
                        .HasColumnName("show_answer_before_check");

                    b.Property<string>("SolveHint")
                        .HasColumnType("JSON")
                        .HasColumnName("solve_hint")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SolveHint"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasColumnName("updated_at");

                    b.Property<byte[]>("WorkId")
                        .IsRequired()
                        .HasColumnType("BINARY(16)")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("work_task");
                });

            modelBuilder.Entity("Noo.Api.Users.Models.MentorAssignmentModel", b =>
                {
                    b.HasOne("Noo.Api.Users.Models.UserModel", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Users.Models.UserModel", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", "Subject")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mentor");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.HasOne("Noo.Api.Subjects.Models.SubjectModel", null)
                        .WithMany("Works")
                        .HasForeignKey("SubjectModelId");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkTaskModel", b =>
                {
                    b.HasOne("Noo.Api.Works.Models.WorkModel", "Work")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Noo.Api.Subjects.Models.SubjectModel", b =>
                {
                    b.Navigation("MentorAssignments");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Noo.Api.Works.Models.WorkModel", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
